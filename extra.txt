unsigned - always positive

size of datatypes
char 1
int 4
float 8
double 8

patterns
logic will always be either related to row or col

bitwise
and &
or |
not ~
xor ^

and
0 0 0
1 0 0
0 1 0
1 1 1

5 - 1 0 1
7 - 1 1 1
    1 0 1 - 5 output

or
1 0 1
0 0 0
0 1 1
1 1 1

3 -   1 1
6 - 1 0 0
    1 1 1 - 7 output

not
1 0
0 1

2 - 000000000010
1's-111111111101
2's-111111111111 - -3 output

xor
0 0 0
1 0 1
0 1 1
1 1 0

5 - 1 0 1
7 - 1 1 1
    0 1 0 - 2 output


left shift - add 0 at the end(mostly it's multiply by 2 in case  of small numbers)
5<<1(shift 5 by 1)(5x2)
5 - 00000000000101
    00000000001010 - 10
3<<2(shift 3 by 2)(3x2x2)
3 - 0000000000011
    0000000001100 - 12

right shift - add 0 at the beginning and drop numbers from the end (mostly it's divide by 2 in case of small numbers)
5>>2
-00000000000101
-00000000000001

left and right shift
1. positive number - padding with 0
2. negative number - padding is compiler dependent
